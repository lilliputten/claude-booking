// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DiningHall {
  id                  Int      @id @default(autoincrement())
  name                String   @unique
  width               Float // Width of the hall layout canvas (e.g. in pixels or units)
  height              Float // Height of the hall layout canvas
  backgroundColor     String? // Optional color code for hall background
  tableColorAvailable String? // Optional default color for available tables
  tableColorOccupied  String? // Optional color for occupied tables
  tableColorReserved  String? // Optional color for reserved tables
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  tables              Table[]
}

model Table {
  id             Int             @id @default(autoincrement())
  tableNumber    Int             @unique
  seats          Int
  status         TableStatus     @default(AVAILABLE)
  diningHall     DiningHall      @relation(fields: [diningHallId], references: [id])
  diningHallId   Int
  x              Float // X coordinate on the dining hall layout
  y              Float // Y coordinate on the dining hall layout
  width          Float? // Optional width of the table for rendering
  height         Float? // Optional height of the table
  rotation       Float? // Optional rotation angle in degrees
  color          String? // Optional color override per table
  reservations   Reservation[]
  walkIns        WalkIn[]
  diningSessions DiningSession[]
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Reservation {
  id              Int               @id @default(autoincrement())
  guestName       String
  phone           String?
  partySize       Int
  startTime       DateTime // start time
  endTime         DateTime // ADD this field for end time
  specialRequests String?
  status          ReservationStatus @default(ACTIVE)
  table           Table             @relation(fields: [tableId], references: [id])
  tableId         Int
}

enum ReservationStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

model WalkIn {
  id           Int       @id @default(autoincrement())
  guestName    String
  phone        String?
  partySize    Int
  seatedAt     Table     @relation(fields: [tableId], references: [id])
  tableId      Int
  checkinTime  DateTime
  checkoutTime DateTime?
}

model DiningSession {
  id        Int       @id @default(autoincrement())
  table     Table     @relation(fields: [tableId], references: [id])
  tableId   Int
  startTime DateTime
  endTime   DateTime?
  partySize Int
}
